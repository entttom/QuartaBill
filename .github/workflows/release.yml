name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.3.3)'
        required: true
        type: string

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Update version in package.json
      if: github.event_name == 'workflow_dispatch'
      run: |
        npm version ${{ github.event.inputs.version }} --no-git-tag-version
        echo "NEW_VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV

    - name: Extract version from tag
      if: github.event_name == 'push'
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "NEW_VERSION=$VERSION" >> $GITHUB_ENV
        
        # ÃœberprÃ¼fe ob Version bereits korrekt ist
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        if [ "$CURRENT_VERSION" != "$VERSION" ]; then
          npm version $VERSION --no-git-tag-version
        else
          echo "Version ist bereits korrekt: $VERSION"
        fi

    - name: Build application
      run: npm run build

    - name: Create Release Assets (Windows)
      run: npm run dist:win

    - name: Create Release Assets (macOS)
      run: npm run dist:mac

    - name: Create Release Assets (Linux)
      run: npm run dist:linux

    - name: Create Release Notes
      id: release_notes
      run: |
        echo "Creating release notes for version $NEW_VERSION"
        cat > release_notes.md << EOF
        ## QuartaBill v$NEW_VERSION
        
        ### ðŸš€ Neue Features
        - Automatische Versionsaktualisierung
        - Zentrale Versionsverwaltung
        
        ### ðŸ”§ Verbesserungen
        - Version wird nun automatisch aus package.json gelesen
        - Bilinguale UnterstÃ¼tzung fÃ¼r alle UI-Elemente
        
        ### ðŸ“¦ Downloads
        
        **Windows:**
        - QuartaBill-Setup-$NEW_VERSION.exe (Installer)
        - QuartaBill-$NEW_VERSION.exe (Portable)
        
        **macOS:**
        - QuartaBill-$NEW_VERSION.dmg (Universal Binary)
        
        **Linux:**
        - QuartaBill-$NEW_VERSION.AppImage
        - quartabill_$NEW_VERSION_amd64.deb
        - quartabill-$NEW_VERSION.x86_64.rpm
        
        ### ðŸ”— Installation
        
        1. Laden Sie die entsprechende Datei fÃ¼r Ihr Betriebssystem herunter
        2. FÃ¼hren Sie die Installation aus
        3. Starten Sie QuartaBill
        
        ---
        
        **VollstÃ¤ndiges Changelog:** https://github.com/entttom/QuartaBill/compare/v${{ github.event.before }}...v$NEW_VERSION
        EOF

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ env.NEW_VERSION }}
        name: QuartaBill v${{ env.NEW_VERSION }}
        body_path: release_notes.md
        draft: false
        prerelease: false
        files: |
          dist/*.exe
          dist/*.dmg
          dist/*.AppImage
          dist/*.deb
          dist/*.rpm
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Commit version update
      if: github.event_name == 'workflow_dispatch'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add package.json package-lock.json
        git commit -m "ðŸ”– Bump version to $NEW_VERSION" || exit 0
        git tag v$NEW_VERSION
        git push origin main
        git push origin v$NEW_VERSION

  update-electron-apps:
    needs: release
    runs-on: ubuntu-latest
    if: success()
    
    steps:
    - name: Update Homebrew Cask (macOS)
      run: |
        echo "Homebrew Cask update would be triggered here"
        # Hier kÃ¶nnte ein automatisches Update fÃ¼r Homebrew Casks implementiert werden
        
    - name: Update Chocolatey (Windows)
      run: |
        echo "Chocolatey update would be triggered here"
        # Hier kÃ¶nnte ein automatisches Update fÃ¼r Chocolatey implementiert werden 