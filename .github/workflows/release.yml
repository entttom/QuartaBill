name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.3.3)'
        required: true
        type: string

permissions:
  contents: write
  packages: read

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: win
            script: dist:win
            artifact_pattern: "dist/*.exe"
          - os: macos-latest
            platform: mac
            script: dist:mac
            artifact_pattern: "dist/*.dmg"
          - os: ubuntu-latest
            platform: linux
            script: dist:linux
            artifact_pattern: "dist/*.{AppImage,deb,rpm}"
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Update version in package.json
      if: github.event_name == 'workflow_dispatch'
      run: |
        npm version ${{ github.event.inputs.version }} --no-git-tag-version
        echo "NEW_VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV

    - name: Extract version from tag
      if: github.event_name == 'push'
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "NEW_VERSION=$VERSION" >> $GITHUB_ENV
        
        # Überprüfe ob Version bereits korrekt ist
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        if [ "$CURRENT_VERSION" != "$VERSION" ]; then
          npm version $VERSION --no-git-tag-version
        else
          echo "Version ist bereits korrekt: $VERSION"
        fi
      shell: bash

    - name: Build application
      run: npm run build

    - name: Create Release Assets
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        CSC_LINK: ${{ secrets.CSC_LINK }}
        CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
      run: npm run ${{ matrix.script }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.platform }}-artifacts
        path: ${{ matrix.artifact_pattern }}
        retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: always() && contains(needs.build.result, 'success')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Extract version from tag
      if: github.event_name == 'push'
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "NEW_VERSION=$VERSION" >> $GITHUB_ENV

    - name: Set version from input
      if: github.event_name == 'workflow_dispatch'
      run: |
        echo "NEW_VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist/

    - name: Prepare artifacts for release
      run: |
        mkdir -p release_files
        find dist/ -type f \( -name "*.exe" -o -name "*.dmg" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" \) -exec cp {} release_files/ \;
        ls -la release_files/

    - name: Create Release Notes
      id: release_notes
      run: |
        echo "Creating release notes for version $NEW_VERSION"
        cat > release_notes.md << EOF
        ## QuartaBill v$NEW_VERSION
        
        ### 🚀 Neue Features
        - Automatische Versionsaktualisierung
        - Zentrale Versionsverwaltung
        - **macOS Notarisierung aktiviert** 🔐
        
        ### 🔧 Verbesserungen
        - Version wird nun automatisch aus package.json gelesen
        - Bilinguale Unterstützung für alle UI-Elemente
        - Cross-Platform-Builds mit separaten Runnern
        
        ### 📦 Downloads
        
        **Windows:**
        - QuartaBill-Setup-$NEW_VERSION.exe (Installer)
        - QuartaBill-$NEW_VERSION.exe (Portable)
        
        **macOS:**
        - QuartaBill-$NEW_VERSION.dmg (Universal Binary, Notarisiert)
        
        **Linux:**
        - QuartaBill-$NEW_VERSION.AppImage
        - quartabill_$NEW_VERSION_amd64.deb
        - quartabill-$NEW_VERSION.x86_64.rpm
        
        ### 🔗 Installation
        
        1. Laden Sie die entsprechende Datei für Ihr Betriebssystem herunter
        2. Führen Sie die Installation aus
        3. Starten Sie QuartaBill
        
        ---
        
        **Vollständiges Changelog:** https://github.com/entttom/QuartaBill/compare/v${{ github.event.before }}...v$NEW_VERSION
        EOF

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ env.NEW_VERSION }}
        name: QuartaBill v${{ env.NEW_VERSION }}
        body_path: release_notes.md
        draft: false
        prerelease: false
        files: release_files/*
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Commit version update
      if: github.event_name == 'workflow_dispatch'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add package.json package-lock.json
        git commit -m "🔖 Bump version to $NEW_VERSION" || exit 0
        git tag v$NEW_VERSION
        git push origin main
        git push origin v$NEW_VERSION

  update-electron-apps:
    needs: release
    runs-on: ubuntu-latest
    if: success()
    
    steps:
    - name: Update Homebrew Cask (macOS)
      run: |
        echo "Homebrew Cask update would be triggered here"
        # Hier könnte ein automatisches Update für Homebrew Casks implementiert werden
        
    - name: Update Chocolatey (Windows)
      run: |
        echo "Chocolatey update would be triggered here"
        # Hier könnte ein automatisches Update für Chocolatey implementiert werden 